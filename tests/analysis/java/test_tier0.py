import json
import os
import shutil
import subprocess

import pytest

from utils import constants
from utils.command import build_analysis_command
from utils.manage_maven_credentials import get_default_token
from utils.report import assert_non_empty_report
from utils.output import assert_analysis_output_violations, assert_analysis_output_dependencies

@pytest.mark.parametrize('tc_name', json.load(open(os.path.join("data", "java_analysis.json"))))
def test_analysis(tc_name, java_analysis_data):
    project_path = os.getenv(constants.PROJECT_PATH)
    output_root_path = os.getenv(constants.REPORT_OUTPUT_PATH, "./output")
    tc = java_analysis_data[tc_name]
    output_dir = os.path.join(output_root_path, tc_name)
    settings_path = None

    # Clean temp files generated by binary analysis
    #java_project_path = os.path.join(project_path, "data", "applications", "java-project")
    #if os.path.exists(java_project_path):
    #    shutil.rmtree(java_project_path)

    # Get the input application
    input = tc['input']
    input_path = os.path.join(project_path, "data", "tmp", tc_name)
    if input.get('git'):
        if not os.path.exists(input_path):
            os.system("git clone %s %s" % (input['git'], input_path))
            #if input['branch']:
                # chdir?
                #os.system("git fetch origin %s:fetched" % input['branch'])
                #os.system("git checkout fetched")
    elif input.get('local'):    # could be absolute, or relative to data/applications
        input_path = input['local']
    else:
        raise Exception("Missing input application")

    # Add settings.xml with credentials needed e.g. by tackle-testapp-public
    if tc.get('settings'):
        with open(tc['settings'], 'r') as f:
            raw_settings = f.read()
        # Token below is always set in CI, populated on nightlies, but '' on PRs for GH secrets restrictions
        maven_token = os.getenv('GIT_PASSWORD', '')
        if maven_token == '':
            maven_token = get_default_token()
        raw_settings = raw_settings.replace('GITHUB_USER', os.getenv('GIT_USERNAME', 'konveyor-read-only-bot'))
        raw_settings = raw_settings.replace('GITHUB_TOKEN', maven_token)
        settings_path = input_path + "_settings.xml"    # leaving this file in tmp
        with open(settings_path, 'w') as f:
            f.write(raw_settings)

    # Build and execute analysis command
    command = build_analysis_command(
        input_path,
        tc['sources'],
        tc['targets'],
        output_path=output_dir,
        settings=settings_path
    )
    output = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, encoding='utf-8').stdout

    # Check analysis results (deeply)
    expected_output_dir = os.path.join(project_path, "data", "expected", "java_analysis", tc_name)
    assert_analysis_output_violations(expected_output_dir, output_dir, input_root_path=input_path)
    
    # Check dependencies (deeply)
    assert_analysis_output_dependencies(expected_output_dir, output_dir, input_root_path=input_path)

    # Check static-report existence
    assert_non_empty_report(output_dir)
